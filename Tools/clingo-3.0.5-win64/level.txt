#const width=11.

dim(1..width).

tile((X,Y)) :- dim(X), dim(Y).

0 { sprite(T,grass;rock) } 1 :- tile(T).

:- not (width*width)/2 { sprite(T,grass) }.
:- not (width*width)/4 { sprite(T,rock) }.

adj((X1,Y1),(X2,Y2)) :- 
 tile((X1,Y1)), 
 tile((X2,Y2)), 
 #abs(X1-X2)+#abs(Y1-Y2) == 1.
 
passable(T) :- tile(T), sprite(T,grass).

sprite(width/2+1, width/2+1, gem).

0 { sprite(T3,rock):adj(T1,T2):adj(T2,T3) } 0 :- start1(T1).
0 { sprite(T3,rock):adj(T1,T2):adj(T2,T3) } 0 :- start2(T1).

start1((2, 2)).
start2((width-1, width-1)).

sprite(T,grass) :- start1(T).
sprite(T,grass) :- start2(T).

touch(T) :- start1(T).
{ touch(T2):adj(T1,T2) } :- touch(T1),passable(T2). 

:- sprite(T,rock), touch(T). 

completed :- start2(T), touch(T). 

:- not completed.